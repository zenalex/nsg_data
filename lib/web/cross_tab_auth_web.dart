import 'dart:async';
import 'dart:convert';
import 'package:web/web.dart' as web;
import 'dart:js_interop';
import 'package:flutter/foundation.dart';

// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
String getCurrentUrl() {
  return web.window.location.href;
}

// –ü–æ–ª—É—á–∏—Ç—å origin (–ø—Ä–æ—Ç–æ–∫–æ–ª + –¥–æ–º–µ–Ω + –ø–æ—Ä—Ç)
String getCurrentOrigin() {
  return web.window.location.origin;
}

// –ü–æ–ª—É—á–∏—Ç—å hostname (–¥–æ–º–µ–Ω)
String getCurrentHostname() {
  return web.window.location.hostname;
}

// –ü–æ–ª—É—á–∏—Ç—å pathname (–ø—É—Ç—å –ø–æ—Å–ª–µ –¥–æ–º–µ–Ω–∞)
String getCurrentPathname() {
  return web.window.location.pathname;
}

// –ü–æ–ª—É—á–∏—Ç—å search –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (?param1=value1&param2=value2)
String getCurrentSearch() {
  return web.window.location.search;
}

// –ü–æ–ª—É—á–∏—Ç—å hash (#anchor)
String getCurrentHash() {
  return web.window.location.hash;
}

// –ü–æ–ª—É—á–∏—Ç—å referrer (–æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏)
String getReferrer() {
  return web.document.referrer;
}

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –±–µ–∑–æ–ø–∞—Å–Ω—ã–º (HTTPS)
bool isSecureUrl() {
  return web.window.location.protocol == 'https:';
}

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
String getBaseUrl() {
  final location = web.window.location;
  return '${location.protocol}//${location.host}${location.pathname}';
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
void printUrlInfo() {
  debugPrint('=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û URL ===');
  debugPrint('–ü–æ–ª–Ω—ã–π URL: ${getCurrentUrl()}');
  debugPrint('Origin: ${getCurrentOrigin()}');
  debugPrint('Hostname: ${getCurrentHostname()}');
  debugPrint('Pathname: ${getCurrentPathname()}');
  debugPrint('Search: ${getCurrentSearch()}');
  debugPrint('Hash: ${getCurrentHash()}');
  debugPrint('Referrer: ${getReferrer()}');
  debugPrint('–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π (HTTPS): ${isSecureUrl()}');
  debugPrint('Base URL: ${getBaseUrl()}');
  debugPrint('========================');
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å URL –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
class UrlParams {
  static Map<String, String> getQueryParameters() {
    final search = getCurrentSearch();
    if (search.isEmpty || !search.startsWith('?')) return {};

    final params = <String, String>{};
    final query = search.substring(1); // –£–±–∏—Ä–∞–µ–º '?'
    final pairs = query.split('&');

    for (final pair in pairs) {
      final parts = pair.split('=');
      if (parts.length == 2) {
        final key = Uri.decodeComponent(parts[0]);
        final value = Uri.decodeComponent(parts[1]);
        params[key] = value;
      }
    }

    return params;
  }

  static String? getQueryParameter(String key) {
    return getQueryParameters()[key];
  }

  static bool hasQueryParameter(String key) {
    return getQueryParameters().containsKey(key);
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
// void exampleUsage() {
//   // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π URL
//   final currentUrl = getCurrentUrl();
//   print('–¢–µ–∫—É—â–∏–π URL: $currentUrl');
//
//   // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
//   final isSecure = isSecureUrl();
//   print('HTTPS: $isSecure');
//
//   // –ü–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
//   final params = UrlParams.getQueryParameters();
//   final userId = UrlParams.getQueryParameter('userId');
//   print('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: $params');
//   print('User ID: $userId');
//
//   // –ü–æ–ª—É—á–∏—Ç—å referrer
//   final referrer = getReferrer();
//   print('–ü—Ä–∏—à–ª–∏ —Å: $referrer');
// }

/// –í–µ–±-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è: —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ —á–µ—Ä–µ–∑ BroadcastChannel
class CrossTabAuth {
  final String channelName;
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π/—Å—Ä–µ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, serverUri)
  final String scope;

  web.BroadcastChannel? _channel;
  JSFunction? _bcListener;
  JSFunction? _lsListener;

  String? _token;

  final void Function(String? token) onTokenChanged;
  final String? Function() getCurrentToken;

  CrossTabAuth({required this.channelName, required this.scope, required this.onTokenChanged, required this.getCurrentToken});

  static const _evSet = 'auth:set';
  static const _evReq = 'auth:req';
  static const _evLogout = 'auth:logout';

  late final String _lsKey = '__auth_broadcast__:$channelName';

  Future<void> init() async {
    debugPrint('[CrossTabAuth] [INIT] init() –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫–∞–Ω–∞–ª–∞: $channelName, scope: $scope, –≤—Ä–µ–º—è: ${DateTime.now().toIso8601String()}');
    debugPrint('[CrossTabAuth] [INIT] –¢–µ–∫—É—â–∏–π origin: ${web.window.location.origin}');
    debugPrint('[CrossTabAuth] [INIT] localStorage key: $_lsKey');
    debugPrint('[CrossTabAuth] [INIT] –ü—Ä–æ–≤–µ—Ä–∫–∞ localStorage: ${web.window.localStorage.getItem(_lsKey) ?? 'null'}');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ URL
    printUrlInfo();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º cross-origin –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    try {
      final testOrigin = web.window.location.origin;
      debugPrint('[CrossTabAuth] [INIT] Cross-origin test - origin: $testOrigin');
      debugPrint('[CrossTabAuth] [INIT] ‚ö†Ô∏è  –í–ê–ñ–ù–û: –í—Å–µ –≤–∫–ª–∞–¥–∫–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–π origin –¥–ª—è —Ä–∞–±–æ—Ç—ã CrossTabAuth');
      debugPrint('[CrossTabAuth] [INIT] üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –¥–æ–º–µ–Ω –¥–ª—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    } catch (e) {
      debugPrint('[CrossTabAuth] [INIT] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ origin: $e');
    }

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º localStorage
    try {
      final testKey = '${_lsKey}_test';
      final testValue = 'test_value_${DateTime.now().millisecondsSinceEpoch}';
      web.window.localStorage.setItem(testKey, testValue);
      final readValue = web.window.localStorage.getItem(testKey);
      web.window.localStorage.removeItem(testKey);
      debugPrint('[CrossTabAuth] [TEST] localStorage —Ç–µ—Å—Ç: –∑–∞–ø–∏—Å–∞–Ω–æ=$testValue, –ø—Ä–æ—á–∏—Ç–∞–Ω–æ=$readValue, —É—Å–ø–µ—Ö=${testValue == readValue}');
    } catch (e) {
      debugPrint('[CrossTabAuth] [TEST] –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è localStorage: $e');
    }

    try {
      _channel = web.BroadcastChannel(channelName);
      debugPrint('[CrossTabAuth] BroadcastChannel —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');

      _bcListener = ((web.Event e) {
        debugPrint('[CrossTabAuth] [BC] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ BroadcastChannel');
        try {
          final me = e as web.MessageEvent;
          final currentOrigin = web.window.location.origin;
          debugPrint('[CrossTabAuth] [BC] MessageEvent –ø–æ–ª—É—á–µ–Ω, origin: ${me.origin}, current origin: $currentOrigin, source: ${me.source}');

          if (me.origin != currentOrigin) {
            debugPrint('[CrossTabAuth] [BC] ‚ö†Ô∏è  CROSS-ORIGIN: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ origin (${me.origin} != $currentOrigin)');
            debugPrint('[CrossTabAuth] [BC] üí° BroadcastChannel –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ origins');
          }

          final raw = _stringFromJsAny(me.data);
          if (raw != null && raw.isNotEmpty) {
            if (raw.startsWith('test:')) {
              debugPrint('[CrossTabAuth] [BC] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–ª–∏–Ω–∞: ${raw.length})');
            } else {
              debugPrint('[CrossTabAuth] [BC] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª–∏–Ω–∞: ${raw.length})');
              _handleMessageString(raw);
            }
          } else {
            debugPrint('[CrossTabAuth] [BC] –ü—É—Å—Ç–æ–µ –∏–ª–∏ null —Å–æ–æ–±—â–µ–Ω–∏–µ');
          }
        } catch (error) {
          debugPrint('[CrossTabAuth] [BC] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: $error');
        }
      }).toJS;
      _channel!.addEventListener('message', _bcListener!);
      debugPrint('[CrossTabAuth] –°–ª—É—à–∞—Ç–µ–ª—å BroadcastChannel –¥–æ–±–∞–≤–ª–µ–Ω');

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º BroadcastChannel
      try {
        final testMessage = 'test:${DateTime.now().millisecondsSinceEpoch}';
        _channel!.postMessage(testMessage.toJS);
        debugPrint('[CrossTabAuth] [TEST] –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ BroadcastChannel –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $testMessage');
      } catch (e) {
        debugPrint('[CrossTabAuth] [TEST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è BroadcastChannel: $e');
      }
    } catch (e) {
      debugPrint('[CrossTabAuth] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è BroadcastChannel: $e');
      _channel = null;
    }

    _lsListener = ((web.Event e) {
      debugPrint('[CrossTabAuth] [LS] –ü–æ–ª—É—á–µ–Ω–æ storage —Å–æ–±—ã—Ç–∏–µ');
      try {
        final se = e as web.StorageEvent;
        final key = se.key;
        final oldValue = se.oldValue;
        final newValue = se.newValue;
        final url = se.url;
        debugPrint('[CrossTabAuth] [LS] StorageEvent - key: $key, url: $url');
        final oldLen = oldValue?.length ?? 0;
        final newLen = newValue?.length ?? 0;
        debugPrint('[CrossTabAuth] [LS] oldValue length: $oldLen, newValue length: $newLen');

        if (key != _lsKey) {
          debugPrint('[CrossTabAuth] [LS] –ò–≥–Ω–æ—Ä: –∫–ª—é—á –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è (_lsKey=$_lsKey)');
          return;
        }
        if (newValue == null) {
          debugPrint('[CrossTabAuth] [LS] –ò–≥–Ω–æ—Ä: newValue == null');
          return;
        }
        if (newValue == oldValue) {
          debugPrint('[CrossTabAuth] [LS] –ò–≥–Ω–æ—Ä: newValue == oldValue');
          return;
        }

        debugPrint('[CrossTabAuth] [LS] –û–±—Ä–∞–±–æ—Ç–∫–∞ storage —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª–∏–Ω–∞: $newLen)');
        _handleMessageString(newValue);
      } catch (error) {
        debugPrint('[CrossTabAuth] [LS] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ storage —Å–æ–±—ã—Ç–∏—è: $error');
      }
    }).toJS;
    web.window.addEventListener('storage', _lsListener!);
    debugPrint('[CrossTabAuth] –°–ª—É—à–∞—Ç–µ–ª—å storage –¥–æ–±–∞–≤–ª–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  void dispose() {
    debugPrint('[CrossTabAuth] dispose() –≤—ã–∑–≤–∞–Ω');

    if (_bcListener != null) {
      debugPrint('[CrossTabAuth] –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è BroadcastChannel');
      _channel?.removeEventListener('message', _bcListener!);
      _bcListener = null;
    }
    if (_lsListener != null) {
      debugPrint('[CrossTabAuth] –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç–µ–ª—è storage');
      web.window.removeEventListener('storage', _lsListener!);
      _lsListener = null;
    }
    _channel?.close();
    debugPrint('[CrossTabAuth] BroadcastChannel –∑–∞–∫—Ä—ã—Ç, dispose –∑–∞–≤–µ—Ä—à–µ–Ω');
  }

  void requestTokenFromPeers() {
    debugPrint('[CrossTabAuth] requestTokenFromPeers() –≤—ã–∑–≤–∞–Ω');
    final message = _msg(type: _evReq, scope: scope);
    debugPrint('[CrossTabAuth] –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ –æ—Ç –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫ (type: _evReq, scope: $scope)');
    _broadcast(message);
  }

  void publishToken(String token) {
    debugPrint('[CrossTabAuth] [PUBLISH] publishToken() –≤—ã–∑–≤–∞–Ω —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª–∏–Ω–æ–π: ${token.length}, –≤—Ä–µ–º—è: ${DateTime.now().toIso8601String()}');
    _token = token;
    debugPrint('[CrossTabAuth] –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
    onTokenChanged(_token);
    debugPrint('[CrossTabAuth] –í—ã–∑–≤–∞–Ω callback onTokenChanged');
    final message = _msg(type: _evSet, token: token, scope: scope);
    debugPrint('[CrossTabAuth] –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –¥—Ä—É–≥–∏–º –≤–∫–ª–∞–¥–∫–∞–º (type: _evSet, scope: $scope)');
    _broadcast(message);
  }

  void broadcastLogout() {
    debugPrint('[CrossTabAuth] broadcastLogout() –≤—ã–∑–≤–∞–Ω');
    _token = null;
    debugPrint('[CrossTabAuth] –õ–æ–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω');
    onTokenChanged(null);
    debugPrint('[CrossTabAuth] –í—ã–∑–≤–∞–Ω callback onTokenChanged —Å null');
    final message = _msg(type: _evLogout, scope: scope);
    debugPrint('[CrossTabAuth] –®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥ (type: _evLogout, scope: $scope)');
    _broadcast(message);
  }

  void _handleMessageString(String raw) {
    debugPrint('[CrossTabAuth] _handleMessageString() –≤—ã–∑–≤–∞–Ω (–¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: ${raw.length})');

    Map<String, dynamic>? data;
    try {
      data = jsonDecode(raw) as Map<String, dynamic>;
      debugPrint('[CrossTabAuth] JSON —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω (–∫–ª—é—á–µ–π: ${data.length})');
    } catch (e) {
      debugPrint('[CrossTabAuth] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: $e');
      return;
    }

    final type = data['type'] as String?;
    final token = data['token'] as String?;
    final msgScope = data['scope'] as String?;

    debugPrint('[CrossTabAuth] –ò–∑–≤–ª–µ—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ - type: $type, token: ${token != null ? '–¥–ª–∏–Ω–∞=${token.length}' : 'null'}, scope: $msgScope');

    // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥—Ä—É–≥–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/—Å–µ—Ä–≤–µ—Ä–∞
    if (msgScope != scope) {
      debugPrint('[CrossTabAuth] –°–æ–æ–±—â–µ–Ω–∏–µ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ - scope –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç (msgScope: $msgScope, currentScope: $scope)');
      return;
    }

    debugPrint('[CrossTabAuth] –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–ø–∞: $type');

    switch (type) {
      case _evReq:
        debugPrint('[CrossTabAuth] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–æ–∫–µ–Ω–∞ (_evReq)');
        final mine = getCurrentToken();
        debugPrint('[CrossTabAuth] –¢–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω: ${mine != null ? '–¥–ª–∏–Ω–∞=${mine.length}' : 'null'}');
        if (mine != null && mine.isNotEmpty) {
          debugPrint('[CrossTabAuth] –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å');
          _broadcast(_msg(type: _evSet, token: mine, scope: scope));
        } else {
          debugPrint('[CrossTabAuth] –¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω');
        }
        break;
      case _evSet:
        debugPrint('[CrossTabAuth] –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–∫–µ–Ω–∞ (_evSet)');
        if (token != null && token.isNotEmpty) {
          debugPrint('[CrossTabAuth] –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞');
          _token = token;
          onTokenChanged(_token);
          debugPrint('[CrossTabAuth] –¢–æ–∫–µ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ callback –≤—ã–∑–≤–∞–Ω');
        } else {
          debugPrint('[CrossTabAuth] –¢–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ null, –ø—Ä–æ–ø—É—Å–∫');
        }
        break;
      case _evLogout:
        debugPrint('[CrossTabAuth] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ (_evLogout)');
        _token = null;
        onTokenChanged(null);
        debugPrint('[CrossTabAuth] –í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–æ–∫–µ–Ω –æ—á–∏—â–µ–Ω');
        break;
      default:
        debugPrint('[CrossTabAuth] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: $type');
    }
  }

  void _broadcast(String message) {
    debugPrint('[CrossTabAuth] [BROADCAST] _broadcast() –≤—ã–∑–≤–∞–Ω (–¥–ª–∏–Ω–∞: ${message.length}, –∫–∞–Ω–∞–ª: $channelName)');

    if (_channel != null) {
      debugPrint('[CrossTabAuth] [BROADCAST] –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ BroadcastChannel');
      try {
        _channel!.postMessage(message.toJS);
        debugPrint('[CrossTabAuth] [BROADCAST] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ BroadcastChannel —É—Å–ø–µ—à–Ω–æ');
      } catch (e) {
        debugPrint('[CrossTabAuth] [BROADCAST] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ BroadcastChannel: $e');
      }
    } else {
      debugPrint('[CrossTabAuth] [BROADCAST] BroadcastChannel –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }

    debugPrint('[CrossTabAuth] [BROADCAST] –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ localStorage (key: $_lsKey)');
    try {
      final oldValue = web.window.localStorage.getItem(_lsKey);
      web.window.localStorage.setItem(_lsKey, message);
      debugPrint('[CrossTabAuth] [BROADCAST] localStorage.setItem –≤—ã–ø–æ–ª–Ω–µ–Ω (—Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${oldValue?.length ?? 0} —Å–∏–º–≤–æ–ª–æ–≤)');
      web.window.localStorage.removeItem(_lsKey);
      debugPrint('[CrossTabAuth] [BROADCAST] localStorage.removeItem –≤—ã–ø–æ–ª–Ω–µ–Ω');
    } catch (e) {
      debugPrint('[CrossTabAuth] [BROADCAST] –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å localStorage: $e');
    }
  }

  static String _msg({required String type, String? token, String? scope}) {
    final message = jsonEncode({'type': type, if (token != null) 'token': token, if (scope != null) 'scope': scope});
    debugPrint('[CrossTabAuth] _msg() —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ (–¥–ª–∏–Ω–∞: ${message.length})');
    return message;
  }

  String? _stringFromJsAny(JSAny? any) {
    debugPrint('[CrossTabAuth] _stringFromJsAny() –≤—ã–∑–≤–∞–Ω —Å —Ç–∏–ø–æ–º: ${any?.runtimeType ?? 'null'}');

    if (any == null) {
      debugPrint('[CrossTabAuth] _stringFromJsAny() - –≤—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä null');
      return null;
    }

    try {
      // –û–∂–∏–¥–∞–µ–º JSString, –ø–æ—Å–∫–æ–ª—å–∫—É –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏
      final result = (any as JSString).toDart;
      debugPrint('[CrossTabAuth] _stringFromJsAny() —É—Å–ø–µ—à–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω, –¥–ª–∏–Ω–∞: ${result.length}');
      return result;
    } catch (e) {
      debugPrint('[CrossTabAuth] _stringFromJsAny() –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è: $e');
      return null;
    }
  }
}
